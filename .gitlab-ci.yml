include:
 - project: acc-co/devops/python/acc-py-gitlab-ci-templates
   file: v2/python.gitlab-ci.yml


variables:
  project_name: simple_repository_browser
  PY_VERSION: '3.11'
  ACC_PY_BASE_IMAGE_TAG: '2023.06'


pre-commit:
  extends: .acc_py_pre-commit


fetch_external_deps:
  image: registry.cern.ch/docker.io/library/node:15
  stage: build
  script:
    - pushd javascript
    - npm install --include=dev
    - npm run build
    - popd

    # Build the acc-py repository browser project pre-requisites.
    - ./acc-py-repository-browser/build.sh
    # Get rid of the unnecessary node_modules now we have built the static files.
    - rm -rf ./acc-py-repository-browser/js_build ./acc-py-repository-browser/javascript
    # Unclear why the build script isn't copying the directory correctly, but do it manually for now... :(
    - cp -r simple_repository_browser ./acc-py-repository-browser/
  artifacts:
    paths:
     - simple_repository_browser/static/js
     - acc-py-repository-browser/


.acc_py_repo_variables:
  variables:
    project_name: acc_py_repository_browser
    project_root: acc-py-repository-browser/


build_wheel:
  needs:
    - fetch_external_deps
  stage: build
  extends: .acc_py_build_wheel


build_wheel_acc_py:
  needs:
    - fetch_external_deps
  stage: build
  extends:
    - .acc_py_build_wheel
    - .acc_py_repo_variables


freeze_wheel:
  # Inject the lockfiles from the source directory into the wheel
  stage: build
  needs:
    - build_wheel
  extends: .acc_py_run_on_acc_py
  # NOTE: use a "_ci" image with the same tag as your Dockerfile
  variables:
      ACC_PY_BASE_IMAGE_NAME: acc-py_cc7_ci
  script:
    # Figure out the wheel to install, compatible with this python version.
    - python -m pip wheel ${project_name}
      --no-deps --no-index
      --find-links ${project_root}/dist/
      --wheel-dir ${project_root}/.wheel-to-deploy
    # Lock the wheel using the existing lock-files.
    - acc-py -vv app lock ${project_root}/.wheel-to-deploy/*.whl
  artifacts:
    paths:
      - ${project_root}/.wheel-to-deploy/*.whl


freeze_wheel_acc_py:
  extends:
    - freeze_wheel
    - .acc_py_repo_variables
  needs:
    - build_wheel_acc_py


build_and_publish_container_image:
  # Build a container image with Kaniko, for more details see
  # https://gitlab.cern.ch/gitlabci-examples/build_docker_image
  stage: deploy
  extends:
    - .acc_py_on_tag
    - .acc_py_repo_variables
  needs:
    - fetch_external_deps
    - freeze_wheel_acc_py
  image:
    name: gitlab-registry.cern.ch/ci-tools/docker-image-builder
    entrypoint: ['']
  before_script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    # Extract the version (according to setuptools-scm) from one of the wheels.
    - export VERSION=$(cd ${project_root}/.wheel-to-deploy/ && ls -1 *.whl | head -n 1 | cut -d'-' -f2 | tr + .)
    - echo $VERSION
  script:
    - mkdir -p ${project_root}/context/
    - cp -r ${project_root}/.wheel-to-deploy ${project_root}/context/
    - echo "Publishing ${CI_REGISTRY_IMAGE}:${VERSION}"
    - /kaniko/executor
      --context ${project_root}/context
      --dockerfile ${project_root}/deployment/Dockerfile
      --destination "${CI_REGISTRY_IMAGE}:${VERSION}"


publish_wheel:
  extends:
    - .acc_py_publish
    - .acc_py_repo_variables
  needs:
    - freeze_wheel_acc_py
  before_script:
    - rm -rf ./dist; mkdir -p ./dist
    - cp ${project_root}/.wheel-to-deploy/* ./dist/
    - find ./dist/
    - !reference [.acc_py_publish, before_script]
